[
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "line": 1,
    "codeStart": null,
    "code": "import 'reflect-metadata';\nimport 'aurelia-polyfills';\n\nimport {bootstrap}      from 'aurelia-bootstrapper';\nimport {newComponent}         from \"test/render\";\n\n\nlet component : any;\n\n\nfunction initialize(bindingContext : any, templateString ?: string) {\n    let template = templateString ? templateString : `\n  aire-search\n  `;\n    component = newComponent(template, bindingContext, 'search/search');\n}\n\nafterEach(() => {\n    component.dispose();\n});\n\ntest(\"a search should initialize a form\", async (done) => {\n    initialize({});\n    await component.create(bootstrap);\n    let search = document.querySelector('form.uk-search');\n    expect(search).toBeTruthy();\n    done();\n});\n\ntest(\"a search should initialize an input\", async (done) => {\n    initialize({});\n    await component.create(bootstrap);\n    let search = document.querySelector('input.uk-search-input');\n    expect(search).toBeTruthy();\n    done();\n});\n\ntest(\"a search can bind a placeholder\", async(done) => {\n    initialize({placeholder: \"Search Me\"}, `\naire-search(placeholder.bind=\"placeholder\")\n  `);\n    await component.create(bootstrap);\n    let search = document.querySelector('.uk-search-input') as HTMLInputElement;\n    expect(search.placeholder).toBe(\"Search Me\");\n    done();\n});\n\ntest(\"a search can take a default argument\", async(done) => {\n    initialize({}, `\naire-search(default)\n  `);\n    await component.create(bootstrap);\n    let search = document.querySelector('.uk-search.uk-search-default');\n    expect(search).toBeTruthy();\n    done();\n});\n\ntest(\"a search can take a large argument\", async(done) => {\n    initialize({}, `\naire-search(large)\n  `);\n    await component.create(bootstrap);\n    let search = document.querySelector('.uk-search.uk-search-large');\n    expect(search).toBeTruthy();\n    done();\n});\n\ntest(\"a search can take a navbar argument\", async(done) => {\n    initialize({}, `\naire-search(navbar)\n  `);\n    await component.create(bootstrap);\n    let search = document.querySelector('.uk-search.uk-search-navbar');\n    expect(search).toBeTruthy();\n    done();\n});\n\ntest(\"a search can take a flip argument\", async(done) => {\n    initialize({}, `\naire-search(flip)\n  `);\n    await component.create(bootstrap);\n    let search = document.querySelector('.uk-search span.uk-search-icon-flip');\n    expect(search).toBeTruthy();\n    done();\n});",
    "ctx": false
  }
]