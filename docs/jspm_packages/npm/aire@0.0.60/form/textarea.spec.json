[
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "line": 1,
    "codeStart": null,
    "code": "import 'reflect-metadata';\nimport 'aurelia-polyfills';\n\nimport {bootstrap}      from 'aurelia-bootstrapper';\nimport {newComponent}         from \"test/render\";\n\n\nlet component : any;\n\n\nfunction initialize(bindingContext : any, templateString ?: string) {\n    let template = templateString ? templateString : `\n  aire-textarea(label.bind=\"textLabel\")\n  `;\n    component = newComponent(template, bindingContext, 'form/textarea');\n}\n\nafterEach(() => {\n    component.dispose();\n});\n\ntest(\"a textarea should initialize\", async (done) => {\n    initialize({textLabel : \"Hello\"});\n    await component.create(bootstrap);\n    let textarea = document.querySelector('textarea.uk-textarea');\n    expect(textarea).toBeTruthy();\n    done();\n});\n\ntest(\"a label should not initialize if not present in binding context\", async (done) => {\n    initialize({});\n    await component.create(bootstrap);\n    let label = document.querySelector('label.uk-form-label');\n    expect(label).toBeFalsy();\n    done();\n});\n\ntest(\"a label should initialize if present in binding context\", async (done) => {\n    initialize({textLabel : \"Hello\"});\n    await component.create(bootstrap);\n    let label = document.querySelector('label.uk-form-label');\n    expect(label).toBeTruthy();\n    done();\n});\n\ntest(\"a label should be for a textarea\", async (done) => {\n    initialize({textLabel : \"Hello\"});\n    await component.create(bootstrap);\n    let label = document.querySelector('label.uk-form-label') as HTMLLabelElement,\n        textarea = document.querySelector('textarea.uk-textarea') as HTMLTextAreaElement;\n    expect(label.htmlFor).toBe(textarea.id);\n    done();\n});\n\ntest(\"a textarea should go disabled when true in binding context\", async (done) => {\n    initialize({textLabel : \"Hello\", disabled : \"true\"}, `\naire-textarea(label.bind=\"textLabel\" disabled.bind=\"disabled\")\n  `);\n    await component.create(bootstrap);\n    let textarea = document.querySelector('textarea') as any;\n    expect(textarea.disabled).toBeTruthy();\n    done();\n});\n\ntest(\"a textarea should not go disabled when false in binding context\", async (done) => {\n    initialize({textLabel : \"Hello\", disabled : \"false\"}, `\naire-textarea(label.bind=\"textLabel\" disabled.bind=\"disabled\")\n  `);\n    await component.create(bootstrap);\n    let textarea = document.querySelector('textarea') as any;\n    expect(textarea.disabled).toBeTruthy();\n    done();\n});\n\ntest(\"a textarea should not go disabled when not in binding context\", async (done) => {\n    initialize({textLabel : \"Hello\"}, `\naire-textarea(label.bind=\"textLabel\")\n  `);\n    await component.create(bootstrap);\n    let textarea = document.querySelector('textarea') as any;\n    expect(textarea.disabled).toBeFalsy();\n    done();\n});\n\ntest(\"a textarea can take a horizontal argument\", async(done) => {\n    initialize({textLabel: \"Henlo\"}, `\naire-textarea(label.bind=\"textLabel\" horizontal)\n  `);\n    await component.create(bootstrap);\n    let textarea = document.querySelector('.uk-form-horizontal');\n    expect(textarea).toBeTruthy();\n    done();\n});\n\ntest(\"a textarea can take a success argument\", async(done) => {\n    initialize({textLabel: \"Henlo\"}, `\naire-textarea(label.bind=\"textLabel\" success)\n  `);\n    await component.create(bootstrap);\n    let textarea = document.querySelector('textarea.uk-form-success');\n    expect(textarea).toBeTruthy();\n    done();\n});\n\ntest(\"a textarea can take a danger argument\", async(done) => {\n    initialize({textLabel: \"Henlo\"}, `\naire-textarea(label.bind=\"textLabel\" danger)\n  `);\n    await component.create(bootstrap);\n    let textarea = document.querySelector('textarea.uk-form-danger');\n    expect(textarea).toBeTruthy();\n    done();\n});\n\ntest(\"a textarea can take a blank argument\", async(done) => {\n    initialize({textLabel: \"Henlo\"}, `\naire-textarea(label.bind=\"textLabel\" blank)\n  `);\n    await component.create(bootstrap);\n    let textarea = document.querySelector('textarea.uk-form-blank');\n    expect(textarea).toBeTruthy();\n    done();\n});",
    "ctx": false
  }
]