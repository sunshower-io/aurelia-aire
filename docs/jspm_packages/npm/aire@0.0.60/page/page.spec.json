[
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "line": 1,
    "codeStart": null,
    "code": "import 'reflect-metadata';\nimport 'aurelia-polyfills';\n\nimport {bootstrap}     from 'aurelia-bootstrapper';\nimport {newComponent}  from \"test/render\";\n\nlet component : any;\n\n\nfunction initialize(bindingContext : any, template : string) {\n    component = newComponent(template,\n        bindingContext,\n        'page/page', 'loader/loader'\n    );\n}\n\nafterEach(() => {\n    component.dispose();\n});\n\ntest(\"a page should initialize\", async(done) => {\n   initialize({}, `aire-page`);\n   await component.create(bootstrap);\n   let page = document.querySelector('.aire-page .page');\n   expect(page).toBeTruthy();\n   done();\n});\n\ntest(\"a page is animated\", async(done) => {\n    initialize({}, `aire-page(padded)`);\n    await component.create(bootstrap);\n    let page = document.querySelector('.aire-page.au-animate');\n    expect(page).toBeTruthy();\n    done();\n});\n\ntest(\"a page has a slot\", async(done) => {\n    initialize({}, `\naire-page\n    p Hello\n    `);\n    await component.create(bootstrap);\n    let paragraph = document.querySelector('.aire-page .page p');\n    expect(paragraph.textContent).toBe(\"Hello\");\n    done();\n});\n\ntest(\"a page can be padded\", async(done) => {\n    initialize({}, `aire-page(padded)`);\n    await component.create(bootstrap);\n    let page = document.querySelector('.aire-page.padded');\n    expect(page).toBeTruthy();\n    done();\n});\n\ntest(\"a page can be loading\", async(done) => {\n    initialize({loading: true}, 'aire-page(loading.bind=\"loading\")');\n    await component.create(bootstrap);\n    let loader = document.querySelector('.aire-page .loader');\n    expect(loader).toBeTruthy();\n    done();\n});\n\ntest(\"a page can be not loading\", async(done) => {\n    initialize({loading: false}, 'aire-page(loading.bind=\"loading\")');\n    await component.create(bootstrap);\n    let loader = document.querySelector('.aire-page .loader');\n    expect(loader).toBeFalsy();\n    done();\n});",
    "ctx": false
  }
]