[
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "line": 1,
    "codeStart": null,
    "code": "export class Main {\n\n  loading : boolean;\n\n  size = 500;\n  canvas : HTMLCanvasElement;\n\n  center = {x : 0, y : 250};\n\n  private minSegmentHeight = 5;\n  private groundHeight = this.size - 20;\n  // private color = \"hsl(180, 80%, 80%)\";\n  color = \"#FFFFFF\";\n  private roughness = 1;\n\n  private maxDifference = this.size / 5;\n  private container : HTMLDivElement;\n\n  private context : CanvasRenderingContext2D;\n\n  width: number;\n  height : number;\n\n  private resolveBody() : HTMLElement {\n    let c : HTMLElement = this.container;\n    for (; !\n             (c || c.classList.contains('aire-body'));\n           c = c.parentElement\n    ) {\n\n\n    }\n    return c;\n  }\n\n  attached() {\n    this.loading = false;\n\n    let canvas = this.canvas,\n      parent = this.resolveBody();\n    let height = 913,\n      width = 1045;\n    canvas.width = width;\n    canvas.height = height;\n    this.width = width;\n    this.height = height;\n\n\n    // canvas.width = this.size;\n    // canvas.height = this.size;\n    this.setup();\n\n    this.render();\n  }\n  count = 0;\n  maxCount = 10;\n\n  render() {\n    let ctx = this.context,\n      size = this.width;\n    ctx.shadowBlur = 0;\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.fillRect(0, 0, size, size);\n    // ctx.globalCompositeOperation = \"lighter\";\n    ctx.shadowBlur = 15;\n    let lightning = this.createLightning();\n    ctx.beginPath();\n    for (let i = 0; i < lightning.length; i++) {\n      ctx.lineTo(lightning[i].x, lightning[i].y);\n    }\n    ctx.stroke();\n    if(this.count++ < this.maxCount) {\n      setTimeout(() => {\n        requestAnimationFrame(this.render.bind(this));\n      }, 50);\n    }\n  }\n\n  createLightning() {\n    let\n      groundHeight = this.groundHeight,\n      center = this.center,\n      maxDifference = this.maxDifference,\n      minSegmentHeight = this.minSegmentHeight,\n      segmentHeight = groundHeight - center.y,\n      roughness = this.roughness,\n      lightning = [];\n    lightning.push({x : center.x, y : this.height * Math.random() / 5});\n    lightning.push({x : this.width, y : this.height * Math.random()});\n    let currDiff = maxDifference;\n    while (segmentHeight > minSegmentHeight) {\n      let newSegments = [];\n      for (let i = 0; i < lightning.length - 1; i++) {\n        let start = lightning[i],\n          end = lightning[i + 1],\n          midX = (start.x + end.x) / 2,\n          newX = midX + (Math.random() * 2 - 1) * currDiff;\n        newSegments.push(start, {x : newX, y : (start.y + end.y) / 2});\n      }\n\n      newSegments.push(lightning.pop());\n      lightning = newSegments;\n\n      currDiff /= roughness;\n      segmentHeight /= 2;\n    }\n    return lightning;\n  }\n\n  setup() {\n    let context = this.canvas.getContext('2d'),\n      size = this.size,\n      color = this.color;\n    context.globalCompositeOperation = 'destination-atop';\n    context.strokeStyle = color;\n    context.shadowColor = color;\n    context.fillStyle = color;\n    context.fillRect(0, 0, this.width, this.height);\n    // context.fillStyle = 'rgba(255,255,255,100)';\n    // context.fillStyle = \"hsla(328, 100%, 20%, 1)\";\n    context.fillStyle = '#660066';\n\n    // context.fillStyle = \"hsla(0, 0%, 10%, 0.2)\";\n\n    this.context = context;\n  }\n}",
    "ctx": {
      "type": "class",
      "constructor": "Main",
      "cons": "Main",
      "name": "Main",
      "extends": "",
      "string": "new Main()"
    }
  }
]