[
  {
    "tags": [],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "line": 1,
    "codeStart": null,
    "code": "import {RouterLoader}                from \"aurelia-router-loader\";\nimport {Loader}                      from 'aurelia-loader';\nimport {RouterConfiguration, Router, NavModel} from 'aurelia-router';\nimport {DefaultLoader}               from \"aurelia-loader-default\";\nimport {autoinject} from 'aurelia-framework';\nimport {\n  EventAggregator,\n  Subscription\n}                                    from 'aurelia-event-aggregator';\nimport {Events}                      from \"aire/events\";\nimport {AireOffCanvas}               from \"aire/offcanvas/offcanvas\";\n\n@autoinject\nexport class App {\n\n  private router: Router;\n\n\n  offcanvas : AireOffCanvas;\n  private subscription: Subscription;\n\n  constructor(loader: Loader, readonly bus: EventAggregator) {\n\n\n  }\n\n  bind() {\n    this.subscription = this.bus.subscribe(\n      Events.NavigationEvent.ITEM_CLICKED,\n      this.offcanvas.hide.bind(this.offcanvas)\n    );\n  }\n\n  unbind() {\n    this.subscription.dispose();\n  }\n\n  attached() {\n\n  }\n\n  toggleOffCanvas() {\n    this.offcanvas.toggle();\n  }\n\n  configureRouter(cfg: RouterConfiguration, router: Router) {\n    let loader = new DefaultLoader(),\n      routerLoader = new RouterLoader(loader, router);\n    routerLoader.defineRoutes(['aire-demo/route/route.comp']);\n    cfg.map([{\n      name: 'main',\n      route: ['', 'main'],\n      moduleId: 'aire-demo/main/overview',\n    }]);\n    this.router = router;\n  }\n\n\n  normalizeTitle = (nav: NavModel) => {\n    return nav.title.split('-').map((word) => {\n      return (word.charAt(0).toUpperCase() + word.slice(1));\n    }).join(' ')\n  };\n\n}",
    "ctx": false
  }
]